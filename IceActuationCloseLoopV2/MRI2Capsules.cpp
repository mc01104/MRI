#include "MRI2Capsules.h"


int sign(double value)
{
	if (value < 0)
		return -1;
	else
		return 1;
}

//initialize position vectors correctly
MRI2Capsules::MRI2Capsules(void)
{
	//george
	m_U_pred = new double[9];
	m_U0 = new double[9];
	for (int i = 0; i < 9; i++)
	{
		m_U_pred[i] = 0.0;
		m_U0[i] = 0.0;
	}

	m_boundariesMinus[0] = 0;
	m_boundariesMinus[1] = PRJ_SIZE/2 + 1; //513;
	m_boundariesPlus[0] = PRJ_SIZE/2;
	m_boundariesPlus[1] = PRJ_SIZE - 1;//1023;

	m_actuationMode = INTERLEAVED; //INTERLEAVED or SIMULTANEOUS
	
	m_PGain = 10;
	m_IGain = 1;
	m_DGain = 1;

	m_counter = 1;

	m_intPI = 0.0; // Set the integral error of the PI controller to 0. for simulatneous actuation and imaging
	m_intPIX = 0.0;
	m_intPIZ = 0.0;

	m_imagingMomentum = 68; //(mT/m)*msec
	m_spoilerTs = 4; // msec
	m_prjLag = 0;
	m_direction = 0;

	m_maxGradAmplitude = 23.0;
	m_nbCapsules = 2;
	m_sequenceType = SPIN_ECHO;

	m_periodSec = 0;


	m_maskPrj = 0;
	
	m_R1 = 0.0005;
	m_R2 = 0.001;
	m_MPC_horizon = 10;
	m_k_iter = 0.1;
	m_global_gain = 1.0;
	m_kp = 1.0;
	m_kq = 1.0;
}

MRI2Capsules::~MRI2Capsules(void)
{
	if (m_maskPrj != 0)
	{
		for(int i = 0; i<NB_CAPSULES*NB_PRJ_AXIS; i++)
			delete [] m_maskPrj[i];
		delete [] m_maskPrj;
	}

	delete [] m_U_pred;
	delete [] m_U0;
	
}

void MRI2Capsules::init(long col, long cha, bool alternateOrSimult)
{
	m_iceObjColLen = col;
	m_iceObjChaLen = cha;
	m_actuationMode = alternateOrSimult;
	
	// These are the correlation masks for localization
	double maskPrjXBead1[PRJ_SIZE] = {0.00147807,0.00133486,0.00144243,0.00123004,0.00119538,0.00112236,0.00138237,0.000915028,0.000911944,0.00113665,0.00118387,0.00131706,0.00130472,0.00126964,0.000803891,0.000961544,0.00132423,0.00131191,0.00169725,0.00108824,0.00107946,0.00140493,0.00132776,0.00189401,0.00123508,0.00103767,0.00165236,0.00117524,0.00148717,0.00159653,0.00124321,0.00123681,0.00135218,0.000857738,0.0017096,0.00107007,0.00115958,0.00131449,0.00147233,0.00184897,0.00162363,0.00183622,0.00115564,0.00193453,0.00142506,0.00158228,0.00121127,0.00145398,0.00236469,0.00170088,0.00117304,0.00124042,0.00170353,0.001694,0.00176709,0.00131576,0.00168942,0.00165813,0.00198002,0.00178665,0.00145874,0.00115656,0.00119222,0.00156638,0.00188061,0.00140469,0.0018002,0.00176414,0.00196967,0.00210086,0.00234614,0.00184172,0.00175964,0.00168744,0.0016479,0.00150163,0.0018805,0.00190128,0.00189537,0.00313025,0.00230179,0.0018685,0.0017463,0.00221687,0.00185202,0.00179033,0.00286352,0.00189837,0.00280348,0.00281638,0.00194145,0.00216513,0.00218674,0.00200906,0.00212962,0.00225491,0.002134,0.00247144,0.00189266,0.00257077,0.00201193,0.00228845,0.00302063,0.00284517,0.00249184,0.00250473,0.00200971,0.00232118,0.00358956,0.00261973,0.00264282,0.00218722,0.0027287,0.00256362,0.00222148,0.0020897,0.00321392,0.00243395,0.00273394,0.00229948,0.00287148,0.00309533,0.00287802,0.0026181,0.00210274,0.00339567,0.00229537,0.00225052,0.00275033,0.00199509,0.00202848,0.00214544,0.0033827,0.00248628,0.00303765,0.00263087,0.00324569,0.00293446,0.00319675,0.0019878,0.00398693,0.00298336,0.00364354,0.00352592,0.00366302,0.0031954,0.0025355,0.00221745,0.00323283,0.00284272,0.00230147,0.00379451,0.00208381,0.00259567,0.00392311,0.00311856,0.0021073,0.00390086,0.00280773,0.00297538,0.00195306,0.00268389,0.00386997,0.00308007,0.00406921,0.00343317,0.00322165,0.00200605,0.00279197,0.00392144,0.00323874,0.00319704,0.00285214,0.00310873,0.00359683,0.00272064,0.00360589,0.00383255,0.00289645,0.00331423,0.00321256,0.00236254,0.00287304,0.002919,0.00311648,0.00294308,0.00319037,0.00194702,0.00383993,0.00448057,0.00371317,0.00303532,0.00361785,0.00282366,0.00361341,0.00289644,0.00221135,0.00277741,0.00264558,0.00314293,0.00275524,0.00302254,0.00287385,0.00341506,0.00251549,0.00334291,0.00199115,0.00424514,0.00336422,0.00380702,0.0026999,0.00307819,0.00277481,0.00383267,0.00517792,0.00415575,0.0031449,0.00495165,0.00337893,0.00368448,0.0032667,0.00311931,0.00347136,0.00379386,0.00362981,0.00301999,0.00298129,0.00331129,0.00321783,0.00290343,0.00360152,0.0034983,0.00321374,0.00367509,0.00346474,0.00323847,0.00405612,0.00309585,0.00418287,0.00433917,0.00341568,0.00375717,0.00285105,0.00342736,0.00283415,0.00292499,0.00325256,0.00344109,0.00255132,0.00357237,0.00322784,0.00245244,0.00420651,0.00343849,0.00263201,0.00259003,0.0032811,0.00274699,0.00248528,0.00332132,0.0029824,0.00372392,0.00228954,0.00438361,0.00314272,0.00394038,0.00319446,0.00298859,0.00224132,0.00218832,0.00313671,0.00463909,0.00315806,0.0029884,0.0027096,0.00324417,0.00413563,0.00292953,0.0032912,0.00326441,0.0043883,0.00311672,0.00353552,0.00292328,0.00424241,0.00345535,0.00352551,0.00341547,0.00365936,0.00230854,0.00366361,0.00319803,0.00303953,0.00303646,0.00413002,0.00409632,0.00399875,0.00341661,0.00331445,0.00282694,0.00338618,0.00382578,0.00376924,0.00318382,0.00356894,0.00229168,0.0033584,0.00224889,0.00278986,0.0033024,0.00323295,0.00309291,0.00255813,0.00436079,0.00421133,0.00349309,0.00449654,0.00340615,0.00249245,0.00340514,0.00272949,0.00322388,0.00235447,0.00331769,0.00290444,0.00285587,0.002866,0.00410691,0.00308324,0.00405577,0.0035101,0.00242233,0.00393338,0.00333288,0.00374745,0.00330612,0.00333714,0.00342734,0.00358304,0.00358161,0.00298312,0.00445618,0.00296446,0.00313753,0.00291561,0.00260958,0.00256468,0.00386697,0.00352297,0.00380392,0.00286549,0.00383371,0.00393703,0.00395831,0.00318906,0.00343673,0.00348086,0.0035221,0.002676,0.00348092,0.00392983,0.00315675,0.00397775,0.0034868,0.00336057,0.00398052,0.00422988,0.0026387,0.00430127,0.00322895,0.00370298,0.00408353,0.00359093,0.00330021,0.00322683,0.00317651,0.00410744,0.00373331,0.00294978,0.0032192,0.00237273,0.00367341,0.00417497,0.00383948,0.00317784,0.00306312,0.00292557,0.00367044,0.00288568,0.00367083,0.00346162,0.00376746,0.00242796,0.00348144,0.00386382,0.00187882,0.00381309,0.00297142,0.00302585,0.00394275,0.00269829,0.00434852,0.00535598,0.00305542,0.0025787,0.0031793,0.0026428,0.00282865,0.00332661,0.00267294,0.00384552,0.00281281,0.00386401,0.00273509,0.00437266,0.0037176,0.00348594,0.00575792,0.00429133,0.00344433,0.00351361,0.00359709,0.00780897,0.00640088,0.00988076,0.011898,0.0138804,0.0158598,0.0207796,0.0233649,0.0234131,0.0279258,0.0305375,0.0326868,0.0320693,0.0325703,0.0328316,0.0358174,0.0333365,0.0353377,0.0336456,0.0337687,0.0352149,0.0335983,0.0341567,0.0325731,0.0312702,0.0331796,0.0297555,0.0314101,0.02793,0.0296199,0.0177252,0.00454904,0.00696587,0.00291981,0.00388808,0.00367071,0.00502596,0.00379545,0.00321655,0.00323949,0.00308357,0.00226366,0.00315914,0.00353458,0.00349094,0.00313492,0.00276141,0.00302443,0.00321399,0.00317665,0.00259767,0.00302428,0.00399258,0.0038107,0.00319348,0.00277989,0.00300175,0.00314734,0.00301031,0.00451325,0.0033203,0.00380721,0.00396333,0.00387267,0.00283796,0.00309914,0.00321542,0.00320124,0.00304037,0.00380442,0.00346901,0.00365707,0.00419338,0.00253469,0.00359789,0.00321509,0.00339795,0.00395449,0.00314832,0.00397375,0.0039819,0.00350101,0.00378525,0.00296359,0.00350201,0.00296828,0.00345819,0.00241598,0.00389637,0.00308492,0.00301932,0.00339581,0.00349359,0.00366623,0.00300261,0.00243059,0.00249483,0.00367232,0.00278998,0.00340195,0.0025547,0.0035042,0.00371471,0.00377734,0.00414493,0.00186345,0.00269769,0.00327589,0.00252466,0.00280588,0.00458506,0.00284479,0.00355656,0.0035075,0.00284249,0.00337095,0.00349597,0.00283519,0.00272398,0.00258613,0.00378594,0.00386423,0.00352664,0.00242317,0.00326156,0.00378317,0.00374567,0.00261089,0.00293983,0.0034658,0.00312201,0.00281078,0.00353442,0.00326316,0.00380889,0.00306586,0.00341681,0.00284497,0.00366106,0.00361405,0.00499679,0.00410735,0.00282956,0.00327721,0.0028064,0.00303374,0.00368811,0.00289691,0.00347608,0.00387717,0.00304051,0.00423591,0.00263906,0.00308656,0.00365141,0.00323227,0.00295775,0.00301422,0.00347077,0.00355835,0.00300958,0.00253397,0.00334145,0.00345533,0.00339897,0.00312537,0.00311151,0.00299208,0.00334708,0.00426965,0.00332997,0.00338418,0.00414279,0.00325084,0.00349764,0.00207849,0.0024669,0.00283395,0.002061,0.00374803,0.00224236,0.00394645,0.00419423,0.00290392,0.00264469,0.00335514,0.00316312,0.00432433,0.00213156,0.00387192,0.0034832,0.00348804,0.00261941,0.00277635,0.00374627,0.0032099,0.00334246,0.00212906,0.0024418,0.00396744,0.00374216,0.00401552,0.00442907,0.00443498,0.00448829,0.00379702,0.00371255,0.00301213,0.00389228,0.00355409,0.00452234,0.00342993,0.00365838,0.00417099,0.00267096,0.00298287,0.00392605,0.00334133,0.0027079,0.00381876,0.00440224,0.00273952,0.00330983,0.0030193,0.00383678,0.00320216,0.00368912,0.00470735,0.00377435,0.00228226,0.00386461,0.00347643,0.00355164,0.00453228,0.00254309,0.00372788,0.00270332,0.00345608,0.00348086,0.00378232,0.00362842,0.0028584,0.00369524,0.00368515,0.00243397,0.00356514,0.00434389,0.00317584,0.00332558,0.00233244,0.00324341,0.00384998,0.00264117,0.00336849,0.00397586,0.00346123,0.00311628,0.00382253,0.00526688,0.0031816,0.00226605,0.0026193,0.00323348,0.00289075,0.0031687,0.00332889,0.00442493,0.00302501,0.0043982,0.00256976,0.00481885,0.00257382,0.0033282,0.00236346,0.00336554,0.00372515,0.00335476,0.00239678,0.0039659,0.00356491,0.00303762,0.00252599,0.00239625,0.00218829,0.00371149,0.00246871,0.0030468,0.00242698,0.00326807,0.00401197,0.0040159,0.00241795,0.00312141,0.00338965,0.00250101,0.00292622,0.00401482,0.00420487,0.00306764,0.00287074,0.00275095,0.00238862,0.00258177,0.00339702,0.00310038,0.00263263,0.00217537,0.00266055,0.00317865,0.00240351,0.00392424,0.00320238,0.0024782,0.00385477,0.00429287,0.00417899,0.00246275,0.00305848,0.00409294,0.00280911,0.0023618,0.00317598,0.00376943,0.00295387,0.0025751,0.0033075,0.0035095,0.00284108,0.00251175,0.00213609,0.00277357,0.00255933,0.00306667,0.00291184,0.00274485,0.0030025,0.00331227,0.00235241,0.00312362,0.00195205,0.00325716,0.00251669,0.00271042,0.00336379,0.00225969,0.0040089,0.00306357,0.0021099,0.00269072,0.00222793,0.00399373,0.00259613,0.00273128,0.00379797,0.00376484,0.00243057,0.00283419,0.00330518,0.00241351,0.00166761,0.00202478,0.00307206,0.00230756,0.00329918,0.00206582,0.00282699,0.00251863,0.00256201,0.00227908,0.00207905,0.00199805,0.00203432,0.00240927,0.00269505,0.00250505,0.00192647,0.00288184,0.00248259,0.00207648,0.00246543,0.00205374,0.00228159,0.00243662,0.00233658,0.00219888,0.00279097,0.00203436,0.00178996,0.00262557,0.001924,0.00199399,0.00255848,0.00308796,0.0021543,0.00172749,0.00234938,0.00213676,0.0023103,0.00188742,0.00203195,0.00187063,0.00183204,0.00164653,0.00117697,0.00184734,0.00228065,0.0017091,0.00212742,0.00180751,0.00159486,0.00138077,0.00152709,0.00191411,0.0013736,0.00169421,0.00136824,0.00192691,0.00111843,0.00142626,0.00185894,0.0016917,0.00139258,0.00134879,0.00234896,0.00185605,0.00188214,0.00176019,0.00120541,0.00103039,0.00107366,0.00150247,0.00113716,0.00144599,0.00160506,0.00128739,0.00147404,0.00158526,0.00170002,0.00179904,0.00140708,0.00122618,0.000916361,0.00154123,0.00149294,0.00177134,0.00170303,0.00154525,0.0012052,0.00129213,0.000893437,0.00119069,0.00115703,0.00166678,0.000747152,0.00158192,0.00100829,0.00146406,0.00124766,0.000851004,0.00109012,0.0011538,0.00103078,0.00121322,0.00114891,0.00105755,0.000766256,0.00168138,0.00105763,0.00144464,0.000881256,0.00128768,0.00106013,0.00126257,0.00114004};
	double maskPrjZBead1[PRJ_SIZE] = {0.00124867,0.00118405,0.000851321,0.000983195,0.00123008,0.00127403,0.00135651,0.00118291,0.00146933,0.0010807,0.000987854,0.00151686,0.00112626,0.00111174,0.00139921,0.000966298,0.00115793,0.0015927,0.00132806,0.000973055,0.00109804,0.00116961,0.00117378,0.00155271,0.00127099,0.00121851,0.00131448,0.00125267,0.000963141,0.00152141,0.00109825,0.00158229,0.00155576,0.00146129,0.00137809,0.00182653,0.00130519,0.00156087,0.000952055,0.00135176,0.00119281,0.00105836,0.00162764,0.0012704,0.00131396,0.000951553,0.00132723,0.00144381,0.00113353,0.00155354,0.00188461,0.00129922,0.00236991,0.0016784,0.00197494,0.00184023,0.00201169,0.00163435,0.00166023,0.00123556,0.00132048,0.00132314,0.00132241,0.00166396,0.00181982,0.00269116,0.00190211,0.00299288,0.00184084,0.00258494,0.00240999,0.00180463,0.00200768,0.00162201,0.00196082,0.00194818,0.00235062,0.00223027,0.00164036,0.00229832,0.00230789,0.00167922,0.00181513,0.00301875,0.0019463,0.00232362,0.00214057,0.00147106,0.00200152,0.00180263,0.00206825,0.00206123,0.00182519,0.00179881,0.00204568,0.0017889,0.0021287,0.00193859,0.00297626,0.00213073,0.00193466,0.00196932,0.00257898,0.00259693,0.00259224,0.00284787,0.00273845,0.00382572,0.00299908,0.00274516,0.00363247,0.00216294,0.00365383,0.00284956,0.00256594,0.00350805,0.00339857,0.00264687,0.00264247,0.00256971,0.00257104,0.00392933,0.00337159,0.00236023,0.00220457,0.00346813,0.003508,0.00280497,0.00232507,0.00281514,0.00229055,0.00350111,0.00400124,0.00229938,0.00222933,0.00275445,0.00262931,0.00340844,0.00274357,0.00201709,0.00255388,0.00254787,0.00247155,0.00205011,0.00374537,0.00372082,0.00406309,0.00297273,0.00253131,0.00257213,0.00412303,0.00317967,0.00367589,0.00301846,0.00279753,0.00339123,0.00257768,0.00345442,0.00238703,0.00281378,0.00298478,0.00367183,0.00326017,0.00270647,0.00328461,0.00357314,0.00261539,0.00261133,0.00440541,0.00267658,0.00226982,0.00326705,0.00315625,0.00399997,0.00344839,0.00386231,0.00256691,0.00353281,0.0034273,0.00322446,0.00307766,0.0029914,0.0034892,0.00323022,0.00234733,0.00394395,0.00308836,0.00335735,0.00374154,0.00351814,0.00301035,0.00359857,0.00279243,0.00327649,0.00421815,0.00363133,0.00333238,0.00296192,0.00232931,0.00463697,0.00283752,0.00354677,0.00325101,0.00356502,0.0024408,0.00375001,0.00301938,0.00255736,0.00467061,0.00328798,0.00384887,0.00446226,0.00224766,0.00247731,0.00295125,0.00256933,0.00281036,0.00412684,0.00243259,0.00273207,0.00285484,0.00322012,0.0033399,0.00337817,0.00390461,0.00308061,0.00326125,0.00301719,0.00301212,0.00339773,0.002952,0.0046174,0.00256267,0.00288512,0.00245438,0.00344569,0.003045,0.00389889,0.00397207,0.0030398,0.00311432,0.00258207,0.00225571,0.00341802,0.00320649,0.00378892,0.00279765,0.00319834,0.00238468,0.00362507,0.00278702,0.00369737,0.00365452,0.00403913,0.00372873,0.00376178,0.00369136,0.00340545,0.0025279,0.00526293,0.0043935,0.00344931,0.00231335,0.00453935,0.00264111,0.00367032,0.00325059,0.00338998,0.00306784,0.00377875,0.00338057,0.00252655,0.00264096,0.00345303,0.002842,0.00342924,0.00532311,0.00394979,0.0035162,0.0029433,0.00380994,0.00311998,0.00357121,0.00295974,0.00351405,0.00324254,0.00280677,0.00356214,0.0036077,0.0037671,0.00238883,0.00241736,0.00282358,0.00244332,0.00305692,0.00333809,0.00388594,0.00289979,0.00415478,0.00382965,0.00330386,0.00281763,0.00305651,0.00497542,0.00427168,0.00378843,0.00236971,0.00455155,0.00360185,0.00239884,0.00343625,0.00316108,0.00282162,0.00385121,0.00353423,0.00251729,0.00379953,0.00366476,0.00288921,0.00387931,0.00340912,0.00316727,0.00355729,0.00328153,0.00295621,0.00367338,0.00286508,0.00316625,0.00529149,0.00398038,0.00302978,0.00285082,0.00319008,0.00300748,0.0032435,0.00521162,0.00394959,0.0031064,0.00338584,0.00312657,0.00467545,0.00333237,0.00301213,0.00386317,0.00309135,0.00338171,0.00298442,0.00263624,0.00363224,0.00375087,0.00345741,0.00331295,0.00338865,0.00282991,0.00423872,0.0039304,0.00386741,0.00464863,0.00386937,0.00277068,0.00304749,0.00397708,0.00400097,0.0043665,0.00388853,0.00454199,0.00385251,0.00429678,0.00211172,0.00362456,0.00218168,0.00342169,0.00372687,0.0027241,0.00269364,0.00275884,0.00331411,0.00311919,0.00414875,0.00231257,0.00454122,0.0027248,0.00306468,0.00370282,0.00356947,0.00298489,0.00398263,0.00263862,0.00336616,0.00302561,0.00313968,0.00300542,0.00300388,0.00478294,0.00346374,0.00487039,0.00474397,0.00308128,0.00251165,0.00275932,0.00346602,0.00379066,0.00321164,0.00335383,0.00318315,0.00375297,0.00417972,0.00234308,0.00280337,0.00234751,0.0035658,0.00310348,0.00262804,0.00289374,0.00292961,0.00310534,0.0031163,0.00249901,0.00350028,0.00478909,0.00552148,0.00669527,0.00759679,0.00800415,0.00932253,0.00982832,0.0129784,0.0124883,0.015185,0.0158723,0.0192044,0.0176648,0.0166547,0.0179753,0.021904,0.0173579,0.0183605,0.016045,0.018677,0.0160477,0.016767,0.0145351,0.0167173,0.0156192,0.017787,0.0157338,0.0182972,0.0185444,0.0217743,0.0172887,0.0202639,0.0187627,0.0208818,0.0205141,0.0234908,0.0205666,0.0223627,0.0217895,0.0256227,0.0241233,0.0264212,0.024731,0.0297087,0.027324,0.0298431,0.0288844,0.0344936,0.0268885,0.0196992,0.0125165,0.00868689,0.00676079,0.00621358,0.00536786,0.00466181,0.00465756,0.00437868,0.00423403,0.00379034,0.00332999,0.00439018,0.00456859,0.00527209,0.00338917,0.00285675,0.00284742,0.00279813,0.00347279,0.00381043,0.00278849,0.00394017,0.00325396,0.00253709,0.00402785,0.0035492,0.00264952,0.0039539,0.00325115,0.0035042,0.00528437,0.003531,0.00318274,0.00480001,0.00268628,0.00384533,0.00325613,0.00396916,0.0037335,0.0036061,0.0030363,0.00387812,0.00397631,0.00219852,0.00339052,0.00347492,0.00293834,0.00293302,0.00229355,0.00384327,0.00266949,0.00268319,0.00311374,0.00437409,0.00246451,0.0038114,0.00326072,0.00263838,0.00447178,0.00315698,0.00287628,0.00413176,0.00369641,0.00349478,0.00421367,0.00448694,0.00320493,0.00209533,0.00402307,0.00428987,0.00306865,0.00532456,0.00283161,0.00416466,0.0030143,0.00433528,0.0037383,0.002739,0.00269136,0.00372031,0.00355456,0.00391708,0.00559132,0.00374778,0.0033599,0.00350039,0.00275784,0.00423441,0.00274059,0.00337915,0.00275202,0.0032345,0.00324532,0.00362054,0.00299366,0.00394028,0.00309172,0.0030815,0.00440225,0.00354405,0.00506909,0.00333159,0.00354228,0.0043839,0.0022031,0.00495288,0.00266101,0.00311282,0.00232545,0.00303373,0.00433725,0.00407707,0.00361711,0.00341712,0.00357372,0.00361414,0.00371348,0.00269865,0.00405559,0.00319425,0.00292509,0.00287249,0.00455623,0.00402704,0.00391263,0.00224857,0.00355274,0.00331206,0.00412264,0.00251068,0.00368104,0.00306689,0.00369703,0.00332798,0.00367354,0.00283415,0.00240752,0.00311383,0.00250326,0.00258338,0.00343554,0.00341743,0.00304466,0.00368405,0.0023739,0.0031308,0.00299919,0.00270633,0.00286756,0.00493619,0.00351393,0.00306916,0.0036104,0.0030002,0.00362447,0.00234389,0.00298644,0.00306669,0.00404474,0.00333066,0.00301698,0.00333245,0.00334707,0.00289758,0.00328741,0.00360329,0.00253624,0.00288716,0.0032545,0.00276848,0.00325503,0.0024453,0.00387961,0.00282014,0.00375703,0.00298378,0.00531898,0.00371433,0.00360685,0.00376137,0.00308266,0.00243915,0.00440297,0.00278373,0.00309684,0.00372726,0.00334609,0.00356019,0.00281319,0.00457643,0.00325108,0.0046672,0.0041351,0.00272698,0.00385516,0.0032354,0.00278811,0.00302199,0.00441996,0.00319904,0.00376077,0.00300653,0.00318013,0.00395888,0.00425573,0.00371644,0.00381186,0.00378105,0.00377846,0.0028953,0.00324794,0.00304877,0.00309243,0.00254215,0.00293294,0.00398964,0.00443483,0.00401206,0.00347963,0.00363673,0.00229225,0.00375205,0.0037052,0.00276578,0.00383929,0.00389218,0.00301895,0.00386519,0.00398332,0.00282729,0.00347392,0.00459282,0.00339995,0.00327186,0.00335264,0.00294782,0.00361214,0.00397301,0.00282727,0.00344434,0.00370038,0.00305392,0.00349551,0.00320364,0.00351044,0.00256013,0.00316556,0.0046256,0.0037283,0.00388122,0.00268595,0.00234707,0.00361535,0.00363519,0.00512088,0.00292625,0.00357153,0.00304296,0.00299188,0.00373036,0.00330153,0.00339351,0.00178886,0.00301048,0.00369477,0.00331805,0.00269834,0.00341738,0.00384236,0.00247606,0.00423418,0.00364744,0.00272014,0.00237667,0.00266076,0.00249046,0.00210815,0.00247443,0.00299443,0.00268186,0.00329081,0.00355139,0.00346642,0.00364081,0.00369866,0.00345673,0.00318607,0.00307372,0.00348242,0.00367019,0.00370229,0.00257242,0.00296828,0.00334794,0.00277791,0.00291592,0.00300334,0.00325754,0.00296174,0.00317287,0.00268367,0.00290678,0.00355808,0.00220564,0.00408142,0.00249435,0.00418943,0.00220551,0.0031394,0.0026999,0.00261783,0.00247737,0.00321428,0.00278105,0.00269026,0.00257179,0.0027292,0.0019245,0.00263117,0.00339038,0.00265825,0.00233121,0.00263327,0.00304258,0.0024662,0.00257609,0.00424689,0.00226912,0.00196187,0.00177658,0.00239177,0.00247813,0.00276746,0.00238047,0.00338209,0.00200706,0.00193053,0.0021147,0.00247109,0.00209051,0.000962828,0.00226518,0.00168849,0.00146483,0.00242318,0.00246072,0.00240261,0.00193498,0.00221551,0.0014542,0.00191497,0.00202814,0.00229017,0.00260594,0.00189335,0.00187436,0.00212985,0.00195373,0.00186257,0.00209604,0.00283329,0.00224085,0.00149927,0.00164992,0.0017454,0.00252092,0.00121933,0.00218809,0.00163929,0.00141283,0.00167348,0.00150194,0.00168471,0.00181078,0.00135193,0.00175566,0.00203309,0.00158593,0.00136847,0.0015129,0.0015792,0.00175819,0.00140935,0.00141322,0.00144395,0.0017695,0.00124381,0.00169475,0.00157971,0.00137157,0.00158781,0.00100438,0.00124526,0.00132115,0.00157171,0.00117412,0.00156593,0.00142629,0.0009801,0.00108912,0.00122241,0.00114474,0.00203054,0.00132885,0.00151517,0.000981447,0.00152381,0.00146955,0.00128107,0.00136511,0.00099797,0.00119054,0.0012351,0.00101532,0.00116277,0.000989011,0.00142834,0.00130715,0.00078862,0.000927395,0.00109423,0.0019889,0.0011868,0.000922683,0.000881484,0.00117646,0.00123504};
	double maskPrjXBead2[PRJ_SIZE] = {0.00113721,0.00126427,0.00112983,0.00103718,0.000810258,0.000898263,0.000855702,0.000875286,0.00125688,0.00106428,0.000756781,0.000889638,0.00101425,0.00102471,0.0012493,0.000978547,0.00100255,0.000911024,0.00136036,0.00105228,0.00128056,0.00115528,0.00130811,0.00146735,0.00095631,0.00127947,0.00127839,0.00128366,0.00143434,0.00114912,0.00127697,0.000764454,0.000948804,0.00101371,0.00101802,0.00166932,0.00127258,0.00133786,0.00113525,0.00124857,0.00132204,0.00161755,0.00134643,0.001438,0.00108646,0.00136246,0.0010669,0.00158113,0.00122844,0.00104305,0.0016526,0.00144351,0.00146012,0.00175122,0.00173949,0.00124702,0.00184354,0.000973313,0.00121637,0.00118492,0.00138612,0.00117688,0.00181322,0.00102142,0.0018262,0.0012021,0.00141713,0.00221175,0.00140967,0.00141414,0.00186355,0.0020317,0.0014702,0.00110017,0.00176661,0.00169666,0.001088,0.00150906,0.00137213,0.0016551,0.00148583,0.00130992,0.00154691,0.00181522,0.00151819,0.00213662,0.00155701,0.00166845,0.00179984,0.0028225,0.00176892,0.00198061,0.00233456,0.0020033,0.00226822,0.0021822,0.00179,0.00214646,0.00221257,0.00219356,0.00181396,0.00210256,0.00252589,0.00152356,0.00206451,0.00159046,0.00173828,0.00166928,0.00140852,0.00248324,0.00251798,0.0023968,0.00189681,0.00243688,0.00219965,0.00223382,0.0022961,0.0023685,0.00201718,0.00246786,0.00239827,0.00195808,0.0023777,0.00232666,0.00240914,0.00252106,0.00338631,0.00268974,0.00229995,0.00248506,0.00196744,0.00248639,0.00245438,0.00197988,0.00251925,0.00240377,0.00245384,0.00258882,0.00242733,0.00184527,0.0023539,0.00267063,0.00354577,0.00229951,0.00238957,0.00257455,0.00274299,0.00313363,0.00280848,0.00266883,0.00187089,0.00223076,0.00343596,0.00254711,0.00261666,0.00231222,0.00270768,0.00279907,0.0033482,0.00269813,0.00312906,0.00289527,0.0029998,0.00222657,0.0027245,0.00330608,0.00331949,0.00293005,0.00229683,0.00271926,0.00345028,0.00330865,0.00273654,0.00393395,0.00404868,0.00259342,0.00318897,0.00264238,0.00233502,0.00266887,0.00350819,0.00312955,0.00277619,0.00226061,0.00319566,0.00224989,0.00299541,0.00289314,0.00326037,0.00281251,0.00195757,0.0029746,0.00426612,0.00339155,0.00210479,0.00287418,0.00170732,0.00435652,0.00254647,0.00226479,0.00218302,0.0028075,0.00399807,0.00178368,0.00230271,0.00290638,0.00298803,0.0030157,0.00276817,0.00269328,0.00294833,0.00389089,0.00242049,0.00271469,0.00256182,0.00247975,0.00213621,0.00378949,0.00367407,0.00286011,0.002743,0.00262137,0.00271367,0.00259818,0.00291116,0.00351724,0.00407375,0.00250041,0.00313203,0.00340773,0.00261786,0.00250748,0.00247668,0.00268327,0.00306725,0.00372109,0.00304869,0.00222697,0.00277137,0.00206304,0.00341873,0.00282474,0.00207091,0.00338998,0.00245244,0.00357427,0.00383902,0.00201066,0.00302492,0.00198089,0.00369948,0.00288831,0.00297245,0.0023767,0.00229198,0.00249105,0.00325991,0.00312865,0.00229536,0.00315528,0.00322944,0.00239711,0.00350958,0.00253154,0.00273744,0.00279258,0.00260739,0.00333669,0.00307158,0.00150556,0.00343548,0.00313981,0.0027794,0.00227355,0.0024874,0.00251325,0.00232663,0.0025935,0.00196057,0.00279431,0.00305297,0.00258682,0.00258121,0.00215848,0.00240842,0.0031835,0.00270582,0.00401482,0.00326511,0.00312072,0.00328016,0.00258006,0.00294509,0.00269662,0.00234359,0.00224309,0.00364451,0.00253493,0.00252064,0.00330093,0.00271109,0.00260611,0.00352998,0.00282804,0.00255075,0.00321667,0.00287568,0.00356386,0.00310906,0.00248422,0.002808,0.00329524,0.00420267,0.00237605,0.00211278,0.00329315,0.00301703,0.00259974,0.00199625,0.00288528,0.00226925,0.00321512,0.00306628,0.00413044,0.00383275,0.00255992,0.00331971,0.00223648,0.00278023,0.003666,0.00269409,0.00290403,0.00255718,0.00268702,0.00310206,0.00327404,0.00305164,0.00347536,0.00302051,0.00311848,0.0034771,0.00260239,0.0033354,0.00309138,0.00322144,0.00312745,0.00325185,0.00344937,0.00264582,0.00239368,0.00211631,0.0031426,0.00258918,0.00292127,0.00353637,0.00311726,0.0030316,0.00283763,0.00307076,0.00318695,0.00467647,0.00304747,0.00257702,0.00285427,0.00225932,0.00270218,0.00294063,0.00353573,0.00259257,0.00217,0.00269366,0.00310153,0.00226172,0.00235018,0.00300563,0.00261029,0.00277509,0.00289053,0.0025175,0.00223771,0.00313969,0.0028559,0.00278698,0.0034076,0.0044124,0.00262934,0.00278823,0.00244438,0.00257311,0.00322991,0.0029024,0.00274116,0.00371674,0.00260854,0.00394147,0.00271974,0.00269194,0.00278514,0.00246518,0.00299471,0.00276702,0.00378099,0.00332304,0.00338611,0.00258719,0.00309834,0.00281602,0.0023397,0.00301331,0.00246104,0.00246335,0.00215697,0.00236673,0.00451397,0.00398644,0.00330765,0.00318151,0.00192911,0.00351828,0.00250566,0.00225887,0.00291381,0.00369346,0.00200003,0.00251679,0.00468886,0.00298226,0.00244953,0.00342066,0.0020515,0.00301643,0.00272274,0.00327199,0.00328861,0.00379951,0.00393625,0.00393022,0.00576372,0.00645139,0.00895,0.0113063,0.0115662,0.0133204,0.0139909,0.0158204,0.0170283,0.0142566,0.0171485,0.0155278,0.0154476,0.0144763,0.0160883,0.014931,0.0153888,0.0166129,0.0161442,0.0173795,0.0164047,0.0196684,0.0168386,0.021592,0.0165737,0.0182452,0.0177901,0.0172085,0.015806,0.0160681,0.0163072,0.0172125,0.0176407,0.0191345,0.0192754,0.0196916,0.0186102,0.02279,0.0200298,0.0205215,0.0182618,0.0203853,0.018861,0.0194725,0.0158625,0.0205788,0.00529154,0.0099298,0.00538345,0.00498607,0.0041865,0.00548565,0.00402355,0.00456733,0.00260012,0.0050792,0.00226325,0.00346258,0.0046114,0.00309197,0.00272091,0.00345149,0.00222038,0.00382395,0.00253889,0.00334653,0.00241133,0.002704,0.00245528,0.00282109,0.00374511,0.00338461,0.00305398,0.00237855,0.00270706,0.00366532,0.002122,0.00275764,0.00347574,0.00305849,0.00280741,0.00463925,0.00199395,0.00216732,0.00230927,0.00311887,0.00340758,0.00211315,0.00331143,0.00311997,0.00250718,0.00262981,0.00227046,0.00342848,0.00355854,0.00390257,0.00320033,0.00253085,0.00386087,0.00363497,0.0028918,0.00254934,0.00221333,0.00304687,0.00252461,0.0021085,0.0035631,0.00252266,0.00269789,0.00286201,0.00266945,0.00277806,0.0029678,0.00294267,0.00307236,0.00350606,0.00305241,0.00322426,0.00257284,0.0035814,0.0038448,0.00304429,0.00300803,0.00296139,0.00352212,0.00314917,0.0041472,0.00234736,0.00180299,0.00191187,0.00296466,0.0032842,0.00315921,0.00205124,0.00342222,0.00245796,0.00208592,0.0029426,0.00316009,0.00386142,0.00288591,0.00320234,0.00224086,0.00275247,0.00299412,0.00296893,0.00340334,0.00242081,0.00298038,0.00347154,0.00291311,0.00225544,0.00438646,0.00392602,0.00242921,0.00262617,0.0028818,0.00335261,0.00232321,0.00353827,0.00349314,0.0028627,0.00297027,0.00308305,0.00241718,0.00228433,0.00245237,0.00337014,0.00446099,0.0027036,0.00233549,0.00274347,0.002614,0.0021691,0.00327417,0.00345964,0.00264616,0.00337276,0.00179081,0.00309422,0.00213683,0.0038802,0.00254778,0.00198386,0.00347041,0.0023512,0.00186063,0.00188099,0.00382601,0.00292549,0.00223587,0.00359226,0.00270986,0.00299961,0.00266448,0.00304327,0.00329016,0.00339,0.00206524,0.0028717,0.00324229,0.0023592,0.00279033,0.00214096,0.00240176,0.00268874,0.00301124,0.00253429,0.00289505,0.00349795,0.00285747,0.00320892,0.00287197,0.00237393,0.00223649,0.0030048,0.00263095,0.00269389,0.00241655,0.00320199,0.00363638,0.00352404,0.00283194,0.00252311,0.00363516,0.00227039,0.0025062,0.00272938,0.00235667,0.0025996,0.00208464,0.00219276,0.00296096,0.0021405,0.00247281,0.00297947,0.00253162,0.00269479,0.00224525,0.00353103,0.00406609,0.00276144,0.0020609,0.00261058,0.00408103,0.00249675,0.00244191,0.00268879,0.00296551,0.00289871,0.00308694,0.003685,0.00301593,0.00216889,0.00326479,0.00272536,0.00255335,0.00207105,0.00419125,0.00244349,0.00296244,0.00235074,0.00321909,0.00276969,0.00311274,0.0029775,0.00307595,0.00229175,0.00263969,0.00258364,0.00280319,0.00276513,0.00311226,0.00287569,0.00380691,0.0032342,0.0029662,0.00308972,0.00324264,0.00380375,0.00288697,0.00352422,0.00268401,0.0031243,0.00159706,0.00331438,0.00261873,0.00250942,0.00291632,0.00270114,0.00274305,0.00287267,0.00179461,0.00216483,0.00203127,0.00291488,0.00266914,0.0028727,0.00267506,0.00359984,0.00252135,0.00372112,0.002511,0.0029027,0.00293902,0.00244784,0.00337843,0.0024479,0.00263456,0.00279702,0.00243658,0.00289634,0.00311378,0.0037896,0.00318003,0.00218356,0.00206796,0.00173527,0.00184733,0.0029802,0.00251913,0.00277276,0.0027172,0.00161146,0.00255099,0.00244781,0.00268329,0.00176152,0.00224508,0.00234289,0.00236237,0.00285534,0.002726,0.0027132,0.00267873,0.00241773,0.00207892,0.00215857,0.00227166,0.00317437,0.00229342,0.00249404,0.0016296,0.00265299,0.00251031,0.00259303,0.00266397,0.00212127,0.00249803,0.00328557,0.00225383,0.00228012,0.00214436,0.00259935,0.00213584,0.00192457,0.00222332,0.00275684,0.00196163,0.00186549,0.00205969,0.00169033,0.00172071,0.00193484,0.00203699,0.00172807,0.00223557,0.00220853,0.00268894,0.00182545,0.00168051,0.00151855,0.00248884,0.00157111,0.00204705,0.00189192,0.00163676,0.0028129,0.00140161,0.00163163,0.00192362,0.00177363,0.00205014,0.00211103,0.00202103,0.00177358,0.00196464,0.00210804,0.00139755,0.00155845,0.00182209,0.00186518,0.00153774,0.0015602,0.00146904,0.00184954,0.00138252,0.00192215,0.0020244,0.00152281,0.00137878,0.00198105,0.00116038,0.00143211,0.00146245,0.0011964,0.00149956,0.00102509,0.00141308,0.00167977,0.00112545,0.00153639,0.00156466,0.000723166,0.00120705,0.00124262,0.00117702,0.00154679,0.00149407,0.000900394,0.00152412,0.00107726,0.00107331,0.00148046,0.00111038,0.00123364,0.00122083,0.00148279,0.00148989,0.00122345,0.00107527,0.00134474,0.00117339,0.00107416,0.000852074,0.000884662,0.000970116,0.00116364,0.00160374,0.00130978,0.000986717,0.000834627,0.00105948,0.000850382,0.00101332,0.000966607,0.000871511,0.000993512,0.000872447,0.000962706,0.00127865,0.00109461,0.000821333,0.00158154,0.000898252,0.00106535,0.000821216,0.00116948,0.001147};
	double maskPrjZBead2[PRJ_SIZE] = {0.00138307,0.00102757,0.00141426,0.000997141,0.00101999,0.00115942,0.0012049,0.00112409,0.00131751,0.00111936,0.00124814,0.00104601,0.00111777,0.00146717,0.00124915,0.00198303,0.0012236,0.000883988,0.00144277,0.00137141,0.00113826,0.00142833,0.00089418,0.00137678,0.00166234,0.00132189,0.00126927,0.00107706,0.00116323,0.00117202,0.00122125,0.00162058,0.00104034,0.00103059,0.00177649,0.00153223,0.00127554,0.0023456,0.00155006,0.0014432,0.00151199,0.00159287,0.0013706,0.0011747,0.00130679,0.00107538,0.0018025,0.00129227,0.00206497,0.00188832,0.00118671,0.0015509,0.00164702,0.00283602,0.00174547,0.00172767,0.00213152,0.0013943,0.00229066,0.00208538,0.0017204,0.00171408,0.00236625,0.00183623,0.00131413,0.0020686,0.00163999,0.00250916,0.00214839,0.00164344,0.00267971,0.00215926,0.00208014,0.00213746,0.00233842,0.001516,0.0031633,0.00194393,0.00191095,0.00175898,0.00199753,0.00198099,0.00252267,0.00227999,0.00284787,0.00210816,0.00251959,0.00311692,0.00185547,0.00197479,0.0025207,0.00263196,0.00156229,0.00330671,0.0024264,0.00239685,0.00281716,0.00228994,0.00282058,0.00268798,0.00273715,0.00363858,0.00352781,0.00229578,0.00280082,0.00405932,0.00234421,0.0021591,0.00301918,0.00198853,0.00301063,0.00251129,0.00247217,0.00344691,0.00237199,0.00332696,0.00274333,0.00295802,0.0025056,0.00254123,0.00285431,0.00264798,0.00204337,0.00310139,0.00273345,0.00384837,0.00189265,0.0036064,0.00270285,0.00332503,0.00347804,0.00286228,0.0036265,0.00299818,0.00200308,0.00360009,0.00504813,0.00333871,0.00311108,0.00296472,0.00286563,0.00293614,0.00281407,0.0023954,0.0036215,0.00349902,0.00486908,0.00429722,0.0026887,0.00300026,0.0029868,0.00342094,0.00340794,0.00339809,0.00372324,0.00319415,0.00253731,0.0032545,0.00281739,0.00357997,0.00311189,0.00342419,0.00179419,0.00355168,0.00418972,0.00276161,0.00452176,0.00305063,0.00445029,0.00410875,0.0043848,0.00417729,0.00447685,0.0033251,0.00351083,0.00369225,0.00289556,0.00478717,0.00366245,0.00353524,0.00275646,0.00287153,0.00422647,0.0027938,0.00290786,0.00250499,0.00419538,0.00411918,0.00330741,0.00289484,0.0026325,0.00288292,0.00391467,0.00240392,0.00402571,0.00392249,0.00290358,0.00452041,0.00346496,0.00265159,0.00295801,0.00321615,0.00252019,0.00236345,0.00424053,0.00337983,0.00321373,0.00369356,0.00566385,0.00352538,0.0044696,0.0038113,0.00368121,0.00277636,0.00344713,0.00270477,0.00327412,0.00403595,0.00383282,0.00399193,0.00372831,0.00327009,0.00368532,0.00356781,0.00336926,0.00384972,0.00315813,0.00319401,0.00438773,0.0042373,0.00319497,0.00296923,0.00383993,0.003331,0.00262199,0.00531351,0.00396879,0.00354835,0.00311485,0.0037622,0.00486364,0.00379695,0.00436437,0.00301081,0.00303173,0.00365817,0.00382544,0.00363818,0.00477673,0.00299912,0.00468332,0.0040844,0.00321008,0.00429661,0.00393115,0.00445231,0.00341209,0.00381643,0.00323042,0.00442525,0.00262518,0.00442519,0.00420527,0.00310462,0.00247672,0.00443081,0.00271529,0.00378346,0.00511117,0.00464477,0.00414208,0.00395255,0.00447209,0.00289616,0.00331237,0.00333967,0.00307243,0.00367788,0.00361957,0.00455124,0.00298754,0.00399762,0.00485106,0.00321611,0.00531954,0.00286437,0.0031677,0.00387843,0.00415987,0.00313113,0.00307329,0.00408358,0.00336665,0.00443525,0.00401213,0.00381618,0.00292834,0.00439681,0.00263529,0.00301476,0.00379739,0.00416419,0.00388985,0.00478121,0.00339461,0.00350462,0.0041339,0.00401637,0.00396903,0.00483739,0.00510759,0.00315858,0.00379793,0.00402986,0.00409403,0.00337848,0.00368069,0.00426093,0.00327898,0.00245973,0.0031323,0.00297175,0.00250775,0.00367884,0.00229843,0.00316446,0.00337315,0.00351502,0.00496239,0.00331507,0.00376528,0.00312332,0.0044103,0.00389103,0.00285183,0.00359534,0.00312373,0.00409964,0.00332392,0.00239713,0.00493583,0.00491048,0.0042795,0.00334096,0.00360927,0.00393517,0.00380684,0.00389909,0.00327711,0.00356837,0.0037328,0.00364455,0.00426766,0.00338092,0.00293524,0.00368614,0.00413216,0.00493931,0.00285919,0.00212175,0.00508527,0.00421252,0.0036688,0.00400036,0.003632,0.0020999,0.00324033,0.00359233,0.0026661,0.00418738,0.00331646,0.00302411,0.00346166,0.00415349,0.00352566,0.00302904,0.0030881,0.00322879,0.00428007,0.0032679,0.00286917,0.00516018,0.00465423,0.00381443,0.00307424,0.00401317,0.00314832,0.00361357,0.00424727,0.00370716,0.00265732,0.00377738,0.00386799,0.0025837,0.00425992,0.00387852,0.00466349,0.00408813,0.00453891,0.00335781,0.00362441,0.0025411,0.00400454,0.00318174,0.00373943,0.00295012,0.00340671,0.00496426,0.00364527,0.00307095,0.00472802,0.00408402,0.00441154,0.00334301,0.00302015,0.00274599,0.00362138,0.00514984,0.00386725,0.00454711,0.0027993,0.00368863,0.0037445,0.00446017,0.00296854,0.00273132,0.00283184,0.00377257,0.00318752,0.00411062,0.00383765,0.00319046,0.00407307,0.00300438,0.00423583,0.00432738,0.00381421,0.00510536,0.00586886,0.00953989,0.0124256,0.0152754,0.0192974,0.0207882,0.025556,0.026345,0.0357695,0.0314284,0.0343445,0.0367487,0.0413983,0.0384683,0.0403446,0.0386219,0.0422388,0.0411296,0.0403814,0.0429003,0.0398703,0.0393298,0.0410515,0.040506,0.037988,0.0348557,0.0340083,0.0329488,0.0290821,0.0231837,0.0160804,0.0135142,0.00551764,0.00510185,0.0059078,0.00470886,0.00322681,0.00345094,0.00336354,0.00357612,0.0041093,0.00331588,0.00324833,0.00541319,0.00348913,0.00407849,0.00365147,0.00289622,0.00354562,0.00272145,0.00544346,0.00399053,0.00378596,0.00309117,0.00449102,0.00377585,0.00399187,0.00277774,0.00339949,0.0033901,0.00360071,0.00332552,0.00266442,0.00377133,0.00237883,0.00332456,0.00397332,0.00367132,0.00346424,0.0039033,0.00299668,0.00367533,0.00344725,0.00323204,0.00388404,0.0028922,0.00272939,0.00318248,0.00315134,0.00304591,0.00281532,0.00514022,0.0035115,0.00442519,0.00309309,0.00207629,0.00370457,0.00319214,0.00256778,0.00284676,0.00360227,0.00436814,0.00321003,0.00409557,0.00277268,0.0026761,0.00505411,0.0038726,0.00402443,0.00336675,0.00383211,0.00343422,0.00345705,0.0037904,0.00532424,0.00309601,0.00276661,0.00274026,0.00249704,0.00448689,0.0025,0.00564617,0.00324343,0.00264318,0.00535535,0.00307482,0.00261836,0.0052231,0.00341808,0.00266272,0.00426498,0.00396968,0.00299134,0.00319322,0.00311118,0.0028677,0.0033487,0.00429112,0.00325536,0.00275446,0.00408859,0.00390698,0.00416598,0.0038974,0.00389696,0.00300457,0.00302099,0.0037548,0.00293679,0.00386595,0.00374876,0.00301255,0.00354129,0.003088,0.00280452,0.00463844,0.0031749,0.00334934,0.00273231,0.00438643,0.00307982,0.00510092,0.00387852,0.00513775,0.00357997,0.00277882,0.00299607,0.0026297,0.00305636,0.00274668,0.00436438,0.00409791,0.00257302,0.00388075,0.00373744,0.0039049,0.00309271,0.0040786,0.00251271,0.00444194,0.00327177,0.0035077,0.00317942,0.00362877,0.00342696,0.00409406,0.00491737,0.00332054,0.00332399,0.00281979,0.00430082,0.00301555,0.00489304,0.00308958,0.0032883,0.00285726,0.00315387,0.00247392,0.00451784,0.0043308,0.00429457,0.00370947,0.00473957,0.00392754,0.00387359,0.00396077,0.00301283,0.00303181,0.00411318,0.00464687,0.00444044,0.00416628,0.0039903,0.00405076,0.00280501,0.00438648,0.00394025,0.00303329,0.0024813,0.0032142,0.00379201,0.00336825,0.00216855,0.00287182,0.00330951,0.00443257,0.00358815,0.0039461,0.00353838,0.00415003,0.00320453,0.00404043,0.00438719,0.00564554,0.00365957,0.00411741,0.00412863,0.00316369,0.00325737,0.00384481,0.00367922,0.00458565,0.00384495,0.00465803,0.00393025,0.00410026,0.00370558,0.00369323,0.00321607,0.00283904,0.00356031,0.00344485,0.00294559,0.00446029,0.00405127,0.00479175,0.00354825,0.00294733,0.00276558,0.00319854,0.00306856,0.00340793,0.00347751,0.00321115,0.0039979,0.0037183,0.00417837,0.00348854,0.00316759,0.00381923,0.0022763,0.00369853,0.00328421,0.00455137,0.00305255,0.00348263,0.00292186,0.00240877,0.00353703,0.0039499,0.00417658,0.00466987,0.00462493,0.00223702,0.00290298,0.00385723,0.00291843,0.00336189,0.0047702,0.0023723,0.00357944,0.00360944,0.00344574,0.00327869,0.004289,0.00449049,0.0038661,0.002316,0.00324495,0.00282542,0.003339,0.00395048,0.00317837,0.00364659,0.0038365,0.00277975,0.00394786,0.00223451,0.00301861,0.00342004,0.00399131,0.00409824,0.00342724,0.00289073,0.00352228,0.00328473,0.00550488,0.0029407,0.00261185,0.00266271,0.00267052,0.00237765,0.00389323,0.0032211,0.00290164,0.00312322,0.00239681,0.00218664,0.00388425,0.00278095,0.00353372,0.00255587,0.00403504,0.00283252,0.0032118,0.00313233,0.00288043,0.0043999,0.00312499,0.00287904,0.00242551,0.00355099,0.00336449,0.00350671,0.00296978,0.00246609,0.00244758,0.00273966,0.00299107,0.00370895,0.00363335,0.00349734,0.00236757,0.00317385,0.00249928,0.00285843,0.00274331,0.00302255,0.00393991,0.00364826,0.00180404,0.00310925,0.00293593,0.00223431,0.00313472,0.00306056,0.00265114,0.00214179,0.00167654,0.00232275,0.00211396,0.00256409,0.00195668,0.00259519,0.0024079,0.00240973,0.00244351,0.00153887,0.0022851,0.00315397,0.00184614,0.00308519,0.00195882,0.00229842,0.00181951,0.00203901,0.00214187,0.00231771,0.00267586,0.00235394,0.00166771,0.00125286,0.00179374,0.00252422,0.00216393,0.00199217,0.00179308,0.00172851,0.00177612,0.00146545,0.00193481,0.00262458,0.00172612,0.00155452,0.00200726,0.00278186,0.00217726,0.00203054,0.00164852,0.00236106,0.00143266,0.00151046,0.00131703,0.00131902,0.00211701,0.00172912,0.00206589,0.00192285,0.00227266,0.00131509,0.00136025,0.00172041,0.00153706,0.00125144,0.00162655,0.00174341,0.00131125,0.00126777,0.0014686,0.00182245,0.00182161,0.0020923,0.00162688,0.00130453,0.00152736,0.00142744,0.00137315,0.00159742,0.0010552,0.00175385,0.00122265,0.00138016,0.00158385,0.00160408,0.00105678,0.000994072,0.000695916,0.000922628,0.00130222,0.00108079,0.00164067,0.00189802,0.00141341,0.00115219,0.00112024,0.00132613,0.0015406,0.00123991,0.00171704,0.00126486,0.0013781,0.00118295,0.000924564,0.00140363,0.00124354,0.00127823,0.00127986,0.00136716};

	
	//copying to the member variable -> this may change if we figure out reading from a file
	m_maskPrj = new double*[NB_CAPSULES*NB_PRJ_AXIS];//
	for(int i = 0; i<NB_CAPSULES*NB_PRJ_AXIS; i++)
	{
		m_maskPrj[i] = new double[m_iceObjColLen*2];
		for(int j = 0; j < m_iceObjColLen*2; j++)
		{	
			switch (i)
			{
			case 0:
				m_maskPrj[i][j] = maskPrjXBead1[j];
				break;
			case 1:
				m_maskPrj[i][j] = maskPrjZBead1[j];
				break;
			case 2:
				m_maskPrj[i][j] = maskPrjXBead2[j];
				break;
			case 3:
				m_maskPrj[i][j] = maskPrjZBead2[j];
				break;
			default:
				m_maskPrj[i][j] = 0.0;
				break;

			}
		}
	}
	
	//ICE_OUT("m_actuationMode" << m_actuationMode );
}


void MRI2Capsules::setPGain(double gain)
{
	m_PGain = gain;
	ICE_OUT( "set m_PGain " << m_PGain);

}
void MRI2Capsules::setDGain(double gain)
{
	m_DGain = gain;
	ICE_OUT( "set m_DGain " << m_DGain);

}
void MRI2Capsules::setMaxGradAmplitude(double max)
{
	m_maxGradAmplitude = max;
}
void MRI2Capsules::setSpoilerDuration(double Ts)
{
	m_spoilerTs = Ts;
}
void MRI2Capsules::setImgMomentum(double momentum)
{
	m_imagingMomentum = momentum;
}


//
//	 function: MRI2Capsules::findCapsulePosition
//
//	 Description: construct a correlation mask with synthetic data. The correlation mask is a
//               centered around 0.
//
/// \brief  File containing declarations for the MRI's capsule control
//         
//  ***************************************************************************/
//


void MRI2Capsules::findCapsulePosition(IceAs& srcCombineAs, IceAs& magDataFTAs, long iceObjColLen, uint16_t prjAxis, int capsuleID)
{	
	long lMaxLigne = 0, lMaxCol = 0, lMinLigne = 0, lMinCol = 0;
	ICE_OUT( "findCapsulePosition Simultaneous");
	// Create a new ICE object to hold the correlation mask
	
	IceObj::Pointer SyntheticCorrMaskObj ( Parc::HeapObject<IceObj>::Create());
	bool status = SyntheticCorrMaskObj->create( ICE_FORMAT_CXFL, COL, iceObjColLen);
	if(!status)
	{
		ICE_OUT( "@@@@@@@@@@@@@@@@@@@@@Creation of ICE Object SyntheticCorrMaskAs in ActuationCloseLoop::chooseAntenna failed!");
	}
	IceAs SyntheticCorrMaskAs(SyntheticCorrMaskObj);
	SyntheticCorrMaskAs = (*SyntheticCorrMaskObj)();

			
	Ice.resetSoda(SyntheticCorrMaskAs);
	if(!Ice.SDC.calcSoda(SyntheticCorrMaskAs, magDataFTAs))
	{
		ICE_OUT( "@@@@@@@@@@@@@@@@@@@@@Reset Soda for SyntheticCorrMaskAs failed!");
	}
	// Developing
	// Fill the new Ice object
	_complex fillValue, fillVoid;
	
	fillValue.y = 0.0;
	int state = 0;
	for(int i = 0; i < iceObjColLen; i++)
	{
		if (capsuleID == 1)
		{
			if (prjAxis == 1)
				state = 0;
			else
				state = 1;
		}
		else
		{
			if (prjAxis == 1)
				state = 2;
			else
				state = 3;

		}

		fillValue.x = m_maskPrj[state][i];

		SyntheticCorrMaskAs.modify(COL, i, 1, 1);
		SyntheticCorrMaskAs.setValue(fillValue);
	}
	SyntheticCorrMaskAs.modify(COL, 0, iceObjColLen, 1);
	Ice.WriteToFile(SyntheticCorrMaskAs, "SyntheticCorrMask", 0, "ab");
	SyntheticCorrMaskAs.modify(COL, 0, iceObjColLen, 1);

	//Compute the inverse fourrier transform of the correlation mask
	IceObj::Pointer CorrMaskInverseFTObj ( Parc::HeapObject<IceObj>::Create());
	status = CorrMaskInverseFTObj->create( ICE_FORMAT_CXFL, COL, iceObjColLen);
	if(!status)
	{
		ICE_OUT( "@@@@@@@@@@@@@@@@@@@@@Creation of ICE Object SyntheticCorrMaskAs in ActuationCloseLoop::chooseAntenna failed!");
	}
	IceAs CorrMaskInverseFTAs(CorrMaskInverseFTObj);
	CorrMaskInverseFTAs = (*CorrMaskInverseFTObj)();

	Ice.resetSoda(CorrMaskInverseFTAs);
	if(!Ice.SDC.calcSoda(CorrMaskInverseFTAs, magDataFTAs))
	{
		ICE_OUT( "@@@@@@@@@@@@@@@@@@@@@Reset Soda for SyntheticCorrMaskAs failed!");
	}
	CorrMaskInverseFTAs.modify(COL, 0, iceObjColLen, 1);
	Ice.FT(CorrMaskInverseFTAs, SyntheticCorrMaskAs,FT_Normal);
    

	//Add imaginary part to 
	IceObj::Pointer magDataFTCXFLOBJ ( Parc::HeapObject<IceObj>::Create());
	status = magDataFTCXFLOBJ->create( ICE_FORMAT_CXFL, COL, iceObjColLen);
	if(!status)
	{
		ICE_OUT( "@@@@@@@@@@@@@@@@@@@@@Creation of ICE Object magDataFTCXFLOBJ in ActuationCloseLoop::chooseAntenna failed!");
	}
	IceAs magDataFTCXFLOBJAs(magDataFTCXFLOBJ);
	magDataFTCXFLOBJAs = (*magDataFTCXFLOBJ)();

			
	Ice.resetSoda(magDataFTCXFLOBJAs);
	if(!Ice.SDC.calcSoda(magDataFTCXFLOBJAs, magDataFTAs))
	{
		ICE_OUT( "@@@@@@@@@@@@@@@@@@@@@Reset Soda for magDataFTCXFLOBJAs failed!");
	}

	float temp;
	_complex srcValue;
	for(int i = 0; i < iceObjColLen; i++)
	{
		magDataFTAs.modify(COL, i, 1, 1);
		srcCombineAs.modify(COL, i, 1, 1);
		magDataFTCXFLOBJAs.modify(COL, i, 1, 1);

		magDataFTAs.getValue(temp);
		srcCombineAs.getValue(srcValue);
		//if(i == 0 || i == 100)
			//ICE_OUT( "temp: " << temp);
		fillValue.x = temp;
		fillValue.y = srcValue.y;
		
		//if (i < (iceObjColLen/2)+peakWidth && i > (iceObjColLen/2)-peakWidth)
		//{
		magDataFTCXFLOBJAs.setValue(fillValue);
		//}
		//else
		//{
		//	SyntheticCorrMaskAs.setValue(fillVoid);
		//}
	}
	
	magDataFTCXFLOBJAs.modify(COL, 0, iceObjColLen, 1);
	Ice.FT(magDataFTCXFLOBJAs, magDataFTCXFLOBJAs, FT_Normal);

	// Performe the correlation function in the frequency domain
	//Ice.ConjComplex(CorrMaskInverseFTAs, srcCombineAs);
	CorrMaskInverseFTAs.modify(COL, 0, iceObjColLen, 1);
	srcCombineAs.modify(COL, 0, iceObjColLen, 1);

	magDataFTCXFLOBJAs.modify(COL, 0, iceObjColLen, 1);

	Ice.WriteToFile(CorrMaskInverseFTAs, "CorrMaskInverseFTAs", 0, "ab");
	
	Ice.ConjComplMul(CorrMaskInverseFTAs, magDataFTCXFLOBJAs,IPCMnormalized);
	//Ice.Mul(CorrMaskInverseFTAs, magDataFTCXFLOBJAs, 2);
	Ice.FT(CorrMaskInverseFTAs, CorrMaskInverseFTAs, FT_Inverse);

	// magDataFTObj : store the magnitude of the Correlation function
	IceObj::Pointer magDataCorrObj ( Parc::HeapObject<IceObj>::Create());
	status = magDataCorrObj->create( ICE_FORMAT_FL, CorrMaskInverseFTAs);
	if(!status)
	{
		ICE_OUT( "@@@@@@@@@@@@@@@@@@@@@Creation of ICE Object magDataFTObj failed!");
	}
	IceAs magDataCorrAs(magDataCorrObj);
	magDataCorrAs = (*magDataCorrObj)(); // specifies whole ima object for COL and LIN

	//Store magnitude data
	Ice.ExtractComplex(magDataCorrAs, CorrMaskInverseFTAs, IemAmplitude, 1.0, 0);

	// Store previous position
	for (int i = 0; i < m_nbCapsules; ++i)
	{
			m_positionKMinus2[i][prjAxis-1] = m_positionKMinus1[i][prjAxis-1];
			m_positionKMinus1[i][prjAxis-1] = m_position[i][prjAxis-1];
	}

	// Peak Detection to find the position
	if(capsuleID ==  1)
	{
		magDataCorrAs.modify(COL, 0, iceObjColLen/2 , 1);
		Ice.CalcStatistics(magDataCorrAs, IsmMax);
		Ice.GetStatisticsMaxPos(lMaxLigne, lMaxCol);
		m_positionIndex[capsuleID-1][prjAxis-1] = iceObjColLen/2 - lMaxLigne;
		m_position[capsuleID-1][prjAxis-1] = ((m_positionIndex[capsuleID-1][prjAxis-1]/(static_cast <double> (m_iceObjColLen))) - 0.5)*OVERSAMPLED_FOV;
	}
	else
	{
		magDataCorrAs.modify(COL, iceObjColLen/2, iceObjColLen/2 , 1);
		Ice.CalcStatistics(magDataCorrAs, IsmMax);
		Ice.GetStatisticsMaxPos(lMaxLigne, lMaxCol);
		m_positionIndex[capsuleID-1][prjAxis-1] = iceObjColLen - lMaxLigne;
		m_position[capsuleID-1][prjAxis-1] = ((m_positionIndex[capsuleID-1][prjAxis-1]/(static_cast <double> (m_iceObjColLen))) - 0.5)*OVERSAMPLED_FOV;
	}

	Ice.WriteToFile(magDataCorrAs, "Correlation", 0, "ab");
	Ice.WriteToFile(magDataFTAs, "RawData", 0, "ab");

	ICE_OUT("Position of Bead " << capsuleID << ":" << m_position[capsuleID - 1][prjAxis - 1]);
}


void MRI2Capsules::indexTo_mm(long id, long prjAxis)// fills m_position, m_positionKMinus1 and m_positionKMinus2
{		
	m_position[id][prjAxis-1] = ((m_positionIndex[id][prjAxis-1]/(static_cast <double> (m_iceObjColLen))) - 0.5)*500;
}



void MRI2Capsules::getControlInputs(FBData& controlInputs)
{

	controlInputs.uValx[0] = m_uValx;
	controlInputs.uValy[0] = 23.0;
	controlInputs.uValz[0] = m_uValz;
	
}


void MRI2Capsules::applyControlLaw(uint16_t prjAxis)
{
	this->computePositionError();

	double error_double[4] = {0};
	error_double[0] = m_positionError[0][0];
	error_double[1] = -m_velocity[0][0];
	error_double[2] = m_positionError[1][0];
	error_double[3] = -m_velocity[1][0];

	this->applyMPCControl(error_double, m_U0, m_uValx, m_U_pred); 
		
	if (m_uValx > 0.2)
		m_uValx = 0.2;
	else if (m_uValx < -0.2)
		m_uValx = -0.2;

	////Alina before plotting devides by 10
	//m_uValx /= 10.0;

	// Update the U0
	for (int j = 0; j < 8; ++j)
		m_U0[j] = m_U_pred[j+1];


}

void MRI2Capsules::computePositionError()
{
	for (int i = 0; i < m_nbCapsules; ++i)
		for (int j = 0; j < NB_PRJ_AXIS; ++j)
			m_positionError[i][j] = m_goal[i][j] - m_position[i][j];
}

void MRI2Capsules::computeVelocity()
{
	for (int i = 0; i < m_nbCapsules; ++i)
		for (int j = 0; j < NB_PRJ_AXIS; ++j)
			m_velocity[i][j] = (m_position[i][j] - m_positionKMinus1[i][j])/m_periodSec; //m/s
}

/*
The implementation is a simple transposition of Alina's Matlab code to C++
Requires better design for modularity
*/
void MRI2Capsules::applyMPCControl(double* error, double* U0, double gradient, double* U_pred)
{
	//define the parameters for the MPC problem
	//int N = 10;				//horizon window for input optimization - read from GUI
	int N = m_MPC_horizon;
	double Ts = 0.01;		//sampling time interval - read from GUI (????)
	int stateDim = 4;
	

	double R_capsule = 0.002;

	//optimal control parameters
	::Eigen::MatrixXd Q(stateDim, stateDim);
	Q << 2.0, 0.0, 0.0, 0.0,
	     0.0, 0.1, 0.0, 0.0,
	     0.0, 0.0, 2.0, 0.0, 
	     0.0, 0.0, 0.0, 0.1;

	Q *= m_kq * 0.001;

	::Eigen::MatrixXd P = 0.01*Q; 
	P *= m_kp;

	double R = 0.001;

	//model parameters
	// double K = 0.1;
	double K = m_k_iter;
	//double r1 = 0.0015;
	//double r2 = 0.0030;
	double r1 = m_R1;
	double r2 = m_R2;

	int	n1 = 7850;
	int	n2 = 7850;

	double n = 1.0e-003;
	double Ms1 = 1.36*1.0e06;
	double Ms2 = 1.36*1.0e06;
	double normu = 1.0;

	//double Re1 = normu*2*r1/n;
	//double Re2 = normu*2*r2/n;
	double Re1 = normu*2*R_capsule/n;
	double Re2 = normu*2*R_capsule/n;
	
	double C1 = 24.0/Re1 + 6.0/(1 + ::std::sqrt(Re1)) + 0.4;
	double C2 = 24.0/Re2 + 6.0/(1 + ::std::sqrt(Re2)) + 0.4;
	double V1 = 4.0/3.0 * M_PI *::std::pow(r1, 3);
	double V2 = 4.0/3.0 * M_PI *::std::pow(r2, 3);
	double A1 = 2 * M_PI*::std::pow(r1, 2); 
	double A2 = 2 * M_PI*::std::pow(r2, 2); 

	double m1 = n1*V1;
    double m2 = n2*V2;

	double V_capsule = 4.0/3.0 * M_PI *::std::pow(R_capsule, 3);
	double A_capsule_half = 2 * M_PI *  ::std::pow(R_capsule, 2);

	//double g1 = V1*Ms1/m1;
	//double g2 = V2*Ms2/m2;

	//double b1 = M_PI*n1*C1*A1/(2*m1);
	//double b2 = M_PI*n2*C2*A2/(2*m2);

	double g1 = V1*Ms1/m1;
	double g2 = V2*Ms2/m2;

	double b1 = M_PI*n1*C1*A_capsule_half/(2*m1);
	double b2 = M_PI*n2*C2*A_capsule_half/(2*m2);

	::Eigen::MatrixXd E = ::Eigen::MatrixXd::Zero(4,N);
	::Eigen::MatrixXd lamda = ::Eigen::MatrixXd::Zero(4,N);
	::Eigen::VectorXd gradH_u = ::Eigen::VectorXd::Ones(N-1);
	
	// U = U0 and map to eigen for computation
	double* U = new double[N-1];
	memcpy(U, U0, (N-1) * sizeof(double));
	::Eigen::Map< ::Eigen::Matrix<double, 9, 1> > U_eig(U);

	// map error to eigen vector
	::Eigen::Map< ::Eigen::Matrix<double, 4, 1> > errorEigen(error);

	E.col(0) = errorEigen;
	int endi = 10000;

	double normgup = 0;
	double normgu = 100000;
	int j = 0;

	::Eigen::MatrixXd gradfx_0;
	gradfx_0.setIdentity(4,4);
	

	while(::std::fabs(normgu-normgup)/Ts >= 0.0001 && j <= endi)
	{
		//Assign variables
		j++;
		normgup = normgu;
		
		for (int k = 0; k < N - 1; k++)
		{
			E(0,k+1) = E(0, k) + Ts * E(1, k);
			E(1,k+1) = E(1, k) + Ts * (-b1 * ::std::pow(E(1, k), 2)) * (sign(E(1, k))) + Ts * g1 * U_eig(k);
			E(2,k+1) = E(2, k) + Ts * E(3, k);
			E(3,k+1) = E(3, k) + Ts * (-b2 * ::std::pow(E(3, k), 2)) * (sign(E(3, k))) + Ts * g2 * U_eig(k);
		}
	    
		lamda.col(N-1) = 2*P*E.col(N-1);

		for (int k = N-2; k >= 0; --k)
		{
			::Eigen::MatrixXd tmp(4,4);
			tmp << 1, Ts - ::std::pow(Ts, 2)*b1*E(1,k)*(sign(E(1,k))), 0, 0,
				   0, 1 - 2*Ts*b1*E(1,k)*(sign(E(1,k))), 0, 0,
				   0, 0, 1, Ts - ::std::pow(Ts, 2)*b2*E(3,k)*(sign(E(3,k))),
				   0, 0, 0, 1 - 2*Ts*b2*E(3,k)*(sign(E(3,k)));

			::Eigen::MatrixXd gradf_x;
			gradf_x = gradfx_0 + tmp;

			lamda.col(k)= 2*Q*E.col(k) + gradf_x.transpose()*lamda.col(k+1);
		}

		for (int k = 0; k < N - 1; k++)
		{
			::Eigen::VectorXd gradf_u(4,1);
			gradf_u << ::std::pow(Ts, 2) * g1/2.0, Ts*g1, ::std::pow(Ts, 2) * g2/2.0, Ts*g2;
			
			gradH_u(k) = 2*R*U_eig(k) + gradf_u.transpose() * lamda.col(k+1);
		}

		normgu = gradH_u.norm();
		U_eig = U_eig - K * gradH_u;
	}

	memcpy(U_pred, U_eig.data(), (N-1) * sizeof(double));
	gradient = m_global_gain * U_pred[0];

	delete U;
}

void MRI2Capsules::setR1(double radius)
{
	m_R1 = radius;
}

void MRI2Capsules::setR2(double radius)
{
	m_R2 = radius;
}

void MRI2Capsules::setMPCHorizon(int N)
{
	m_MPC_horizon = N;
}

void MRI2Capsules::setGainIterative(double gain)
{
	m_k_iter = gain;
}

void MRI2Capsules::setGainGlobal(double gain)
{
	m_global_gain = gain;
}

void MRI2Capsules::setGainP(double gain)
{
	m_kp = gain;
}

void MRI2Capsules::setGainQ(double gain)
{
	m_kq = gain;
}
