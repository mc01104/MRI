// --------------------------------------------------------------------------------------------
//    Copyright (C) Siemens AG 2010  All Rights Reserved. Confidential.
// --------------------------------------------------------------------------------------------
//
//  Project: NUMARIS/4
//     File: \n4_servers1\pkg\MrServers\MrImaging\seq\FLASH\FLASH.h
//   Author: H IM MR PLM AW T-AFW
//
//     Lang: C++
//
//  Descrip: Header file for FLASH Sequence
//
//  Remarks: This is the demo sequence FLASH.
//           DO NOT base any diagnosis on images generated by this sequence!
//
// --------------------------------------------------------------------------------------------

#ifndef FLASH_h
#define FLASH_h 1

// --------------------------------------------------------------------------------------------
// Includes
// --------------------------------------------------------------------------------------------
#include "MrServers/MrImaging/libSBB/StdSeqIF.h"
#include "MrCommon/MrGlobalDefinitions/MrResult.h"

#include "MrServers/MrImaging/seq/SystemProperties.h"
#include "MrServers/MrImaging/libSeqSysProp/SysProperties.h"

#include "MrServers/MrImaging/libSL/StdSL.h"
#include "MrServers/MrImaging/libSL/StdSL_ID.h"
#include "MrServers/MrImaging/libSL/StdMediator.h"
#include "MrServers/MrImaging/libSL/RFSpoiledLeaf.h"

#include "MrServers/MrImaging/seq/FLASH/FISPKernel.h"
#include "MrServers/MrImaging/seq/FLASH/FLASHSamplingConfigurator.h"

#include "MrServers/MrImaging/libKSpace/SamplingParams.h"
#include "MrServers/MrImaging/libKSpace/KSpaceException.h"
#include "MrServers/MrImaging/libKSpace/StdCheckSampling.h"

#include "MrServers/MrImaging/seq/common/WIPParameterTool/WIPParameterTool.h"

#include "MrServers/MrMeasSrv/SeqIF/Sequence/sequmsg.h"
#include "MrServers/MrMeasSrv/SeqIF/libRT/sSLICE_POS.h"

#ifdef WIN32
#include "MrServers/MrProtSrv/MrProtocol/UILink/StdProtRes/StdProtRes.h"
#include "MrServers/MrMeasSrv/SeqIF/Sequence/Sequence.h"
#include <vector>
#endif


// DLL imports/exports
#ifdef BUILD_SEQU
    #define __OWNER
#endif
#include "MrCommon/MrGlobalDefinitions/ImpExpCtrl.h"


namespace SEQ_NAMESPACE {

    // forward declarations
    class FlashUI;
    class FlashSampling;

    
    enum WIPParameterPositions {
        WIPLong         = 0,
        WIPDouble       = 1,
        WIPBool         = 2,
        WIPSelection    = 3,
        WIPMaxTE        = 5,
        WIPOnlineRecon  = 7,
        WIPLongArray    = 9,
        WIPDoubleArray  = 10
    };


    static const char* sOption1 = "option 1";
    static const char* sOption2 = "option 2";
    static const char* sOption3 = "option 3";

    static int iUTraceMarker = 0;


    // --------------------------------------------------------------------------------------------
    ///  \brief    This class represents the demo sequence "FLASH". The sequence serves as a
    ///            starting point for developing new sequences.
    ///
    ///            The sequence shows a basic implementation of the sequence interface.
    ///            Furthermore, the usage of the following components is demonstrated:
    ///
    ///            - libCSL / libSL   (arrange loops and SBBs)
    ///            - libKSpace        (k-space trajectory)
    ///            - WIPParameterTool (UI handling)
    ///
    ///  \remarks  DO NOT base any diagnosis on images generated by this sequence!
    // --------------------------------------------------------------------------------------------
    class Flash : public StdSeqIF
    {
    public:
        // --------------------------------------------------------------------------------------------
        ///  \brief    Standard constructor for the FLASH sequence object.
        ///
        ///            The class members (gradients, ADCs, etc.) are initialized with default values.
        // --------------------------------------------------------------------------------------------
        Flash (void);


        // --------------------------------------------------------------------------------------------
        ///  \brief    Standard destructor for the FLASH sequence object.
        ///
        ///            Also the FlashUI object will be deleted.
        // --------------------------------------------------------------------------------------------
        virtual ~Flash (void);


        // --------------------------------------------------------------------------------------------
        ///  \brief    This method performs several initialization steps.
        ///
        ///            The following information is stored in the provided SeqLim object:
        ///            - General information about this sequence and the used version
        ///            - Hardware requirements
        ///            - Hard limits for UI parameters
        ///
        ///            Furthermore, the FlashUI instance is created.
        ///
        ///  \param    rSeqLim  Object to store sequence information, limits and requirements
        ///
        ///  \return   NLSStatus (SEQU__NORMAL if no error occurred)
        // --------------------------------------------------------------------------------------------
        virtual NLSStatus initialize (SeqLim& rSeqLim);


        // --------------------------------------------------------------------------------------------
        ///  \brief    This method prepares the sequence and its members.
        ///
        ///            In general, this method will check that allowed parameter limits (i.e. soft
        ///            limits) are not exceeded. Depending on the "prepare context", the method will
        ///            perform additional tasks.
        ///
        ///            The "normal context" is the final preparation prior to an actual measurement
        ///            (really executed or simulated). In this case, the method performs all required
        ///            calculations and adjustments.
        ///
        ///            Additionally, there is the "context for binary search". This context is used by
        ///            the user interface (UI) to determine parameter soft limits. The binary search
        ///            is a systematic trial-and-error method which requires a fast feedback method.
        ///            Therefore, the prepare method is performance optimized in the "context for
        ///            binary search".
        ///
        ///            Finally, there is the "context for protocol update". This context is used to set
        ///            set or modify protocol values (while the protocol should never be modified in
        ///            other contexts). This context is required for example for setting WIP parameter
        ///            default values. Another example can be found in sequences which always run at
        ///            minimum TR.
        ///
        ///            The mechanism to obtain the "context for protocol update" is as follows. If the
        ///            prepare method returns SEQU_ERROR, the prepare method will be called once again
        ///            with the same protocol in "context for protocol update" to allow protocol
        ///            modifications.
        ///
        ///  \param    rMrProt   Measurement protocol
        ///  \param    rSeqLim   Limits and requirements for this sequence
        ///  \param    rSeqExpo  Object to store sequence export information
        ///
        ///  \return   NLSStatus (e.g. SEQU_NORMAL or SEQU_ERROR)
        // --------------------------------------------------------------------------------------------
        virtual NLSStatus prepare (MrProt& rMrProt, SeqLim& rSeqLim, SeqExpo& rSeqExpo);

        
        // --------------------------------------------------------------------------------------------
        ///  \brief    This method is a sub method of prepare in which the example conflicts for the
        ///            registered WIP parameters are implemented.
        ///
        ///            Three example conflicts are implemented:
        ///            - (a) Forbidden: ((WIPLong > 50) && (WIPDouble > 1))
        ///            - (b) Forbidden: ((WIPLong > 50) && (WIPSelection == sOption1))
        ///            - (c) Forbidden: (WIPMaxTE < TE)
        ///
        ///  \param    rMrProt   Measurement protocol
        ///  \param    rSeqLim   Limits and requirements for this sequence
        ///  \param    rSeqExpo  Object to store sequence export information
        ///
        ///  \return   NLSStatus (e.g. SEQU_NORMAL or SEQU_ERROR)
        // --------------------------------------------------------------------------------------------
        virtual NLSStatus prepareExampleConflicts (MrProt& rMrProt, SeqLim& rSeqLim, SeqExpo& rSeqExpo);
        

        // --------------------------------------------------------------------------------------------
        ///  \brief    This method is a sub method of prepare in which the k-space trajectory is
        ///            prepared and calculated.
        ///
        ///  \param    rMrProt   Measurement protocol
        ///  \param    rSeqLim   Limits and requirements for this sequence
        ///  \param    rSeqExpo  Object to store sequence export information
        ///
        ///  \return   NLSStatus (e.g. SEQU_NORMAL or SEQU_ERROR)
        // --------------------------------------------------------------------------------------------
        virtual NLSStatus prepareKSpaceSampling (MrProt& rMrProt, SeqLim& rSeqLim, SeqExpo& rSeqExpo);
        
        
        // --------------------------------------------------------------------------------------------
        ///  \brief    This method is a sub method of prepare in which the composite seq loop is
        ///            prepared.
        ///
        ///  \param    rMrProt   Measurement protocol
        ///  \param    rSeqLim   Limits and requirements for this sequence
        ///  \param    rSeqExpo  Object to store sequence export information
        ///
        ///  \return   NLSStatus (e.g. SEQU_NORMAL or SEQU_ERROR)
        // --------------------------------------------------------------------------------------------
        virtual NLSStatus prepareCompositeSeqLoop (MrProt& rMrProt, SeqLim& rSeqLim, SeqExpo& rSeqExpo);


        // --------------------------------------------------------------------------------------------
        ///  \brief    This method checks the protocol for gradient stimulation (maximum gradient
        ///            amplitude and GSWD look ahead).
        ///
        ///            This method will be called prior to a measurement to ensure that no gradient
        ///            overflow will occur and stimulation of nerves due to switching gradients does
        ///            not exceed the allowed limits.
        ///
        ///  \param    rMrProt        Measurement protocol
        ///  \param    rSeqLim        Limits and requirements for this sequence
        ///  \param    rSeqExpo       Object to store sequence export information
        ///  \param    pSEQCheckMode  Object to tell which tests need to be performed
        ///
        ///  \return   NLSStatus (SEQU__NORMAL if no error occurred)
        // --------------------------------------------------------------------------------------------
        virtual NLSStatus check (MrProt& rMrProt, SeqLim& rSeqLim, SeqExpo& rSeqExpo, SEQCheckMode* pSEQCheckMode);


        // --------------------------------------------------------------------------------------------
        ///  \brief    This method executes the sequence with the given measurement protocol.
        ///
        ///  \param    rMrProt   Measurement protocol
        ///  \param    rSeqLim   Limits and requirements for this sequence
        ///  \param    rSeqExpo  Object to store sequence export information
        ///
        ///  \return   NLSStatus (SEQU__NORMAL if no error occurred)
        // --------------------------------------------------------------------------------------------
        virtual NLSStatus run (MrProt& rMrProt, SeqLim& rSeqLim, SeqExpo& rSeqExpo);


        // --------------------------------------------------------------------------------------------
        ///  \brief    Obsolete method that is required for backward compatibility.
        // --------------------------------------------------------------------------------------------
        virtual NLS_STATUS runKernel (MrProt&, SeqLim&, SeqExpo&, long, long, long, long) { return SEQU_NORMAL; }


    protected:

        long     m_lLines;
        long     m_lPartitions;

        int32_t  m_lKSpacePointsToMeasure;
        int32_t  m_lKSpacePointsToCheck;
        long     m_lSlicesToMeasure;
        double   m_dMinRiseTime;
        double   m_dGradMaxAmpl;


        // Slice position information (rotation matrices and shifts)
        sSLICE_POS m_asSLC [K_NO_SLI_MAX];


        // --------------------------------------------------------------------------------------------
        ///  \brief    Customized KSpaceSampling used for run
        // --------------------------------------------------------------------------------------------
        FlashSamplingConfigurator m_SamplingConfigurator;

        
        // --------------------------------------------------------------------------------------------
        ///  \brief    Sampling instance that is used for sequence-check
        // --------------------------------------------------------------------------------------------
        KSpace::StdCheckSampling m_CheckSampling;


        // --------------------------------------------------------------------------------------------
        ///  \brief    Standard mediator used for parameter exchange in CSL
        // --------------------------------------------------------------------------------------------
        SL::StdMediator m_SLM;


        // --------------------------------------------------------------------------------------------
        ///  \brief    Composite SeqLoop, default implementation
        // --------------------------------------------------------------------------------------------
        SL::StdSL m_SL;


        // --------------------------------------------------------------------------------------------
        ///  \brief    FISP kernel
        // --------------------------------------------------------------------------------------------
        SL::FISPKernel m_FISPKernel;


        // --------------------------------------------------------------------------------------------
        ///  \brief    RF spoiling decorator used to get a FLASH kernel
        // --------------------------------------------------------------------------------------------
        SL::RFSpoiledLeaf m_FLASHKernel;


        // --------------------------------------------------------------------------------------------
        ///  \brief    The associated FlashUI instance defines specialized UI behavior.
        // --------------------------------------------------------------------------------------------
        FlashUI* m_pFlashUI;


        // --------------------------------------------------------------------------------------------
        ///  \brief    The associated WIPParamTool instance
        // --------------------------------------------------------------------------------------------
        WPT_NAMESPACE::WIPParameterTool m_WIPParamTool;


    private:

        // copy constructor and assignment operator should not be accessible
        Flash (const Flash &rRight);
        Flash& operator= (const Flash &rRight);
    };
}


#endif

// --------------------------------------------------------------------------------------------
//    Copyright (C) Siemens AG 2010  All Rights Reserved. Confidential.
// --------------------------------------------------------------------------------------------
